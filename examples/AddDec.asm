"".Context64.Add STEXT size=1319 args=0x20 locals=0x118
TEXT	"".Context64.Add(SB), ABIInternal, $280-32
MOVQ	(TLS), CX
LEAQ	-152(SP), AX
CMPQ	AX, 16(CX)
JLS	1309
SUBQ	$280, SP
MOVQ	BP, 272(SP)
LEAQ	272(SP), BP
FUNCDATA	$0, gclocals·fcf5af2016adf65a97b579a67730f1b6(SB)
FUNCDATA	$1, gclocals·bf671f023ad2c3a09846dc7aef6a0045(SB)
FUNCDATA	$3, gclocals·96839595c383af6ae8227769d90a999e(SB)
FUNCDATA	$4, "".Context64.Add.stkobj(SB)
PCDATA	$2, $0
PCDATA	$0, $0
MOVQ	"".d+296(SP), AX
MOVQ	AX, (SP)
CALL	"".Decimal64.getParts(SB)
PCDATA	$0, $1
MOVUPS	8(SP), X0
MOVUPS	X0, "".dp+128(SP)
MOVUPS	24(SP), X0
MOVUPS	X0, "".dp+144(SP)
MOVUPS	40(SP), X0
MOVUPS	X0, "".dp+160(SP)
// PT 2
MOVQ	"".e+304(SP), AX
MOVQ	AX, (SP)
CALL	"".Decimal64.getParts(SB)
PCDATA	$0, $2
MOVUPS	8(SP), X0
MOVUPS	X0, "".ep+80(SP)
MOVUPS	24(SP), X0
MOVUPS	X0, "".ep+96(SP)
MOVUPS	40(SP), X0
MOVUPS	X0, "".ep+112(SP)
PCDATA	$0, $3
XORPS	X0, X0
MOVUPS	X0, ""..autotmp_26+64(SP)
PCDATA	$2, $1
LEAQ	"".dp+128(SP), AX
PCDATA	$2, $0
MOVQ	AX, ""..autotmp_26+64(SP)
PCDATA	$2, $2
LEAQ	"".ep+80(SP), CX
PCDATA	$2, $0
MOVQ	CX, ""..autotmp_26+72(SP)
PCDATA	$2, $3
PCDATA	$0, $2
LEAQ	""..autotmp_26+64(SP), DX
PCDATA	$2, $0
MOVQ	DX, (SP)
MOVQ	$2, 8(SP)
MOVQ	$2, 16(SP)
CALL	"".propagateNan(SB)
PCDATA	$2, $1
MOVQ	24(SP), AX
TESTQ	AX, AX
JNE	1275
PCDATA	$2, $0
MOVQ	"".dp+128(SP), AX
CMPQ	AX, $1
JNE	364
PCDATA	$2, $-2
PCDATA	$0, $-2
JNE	332
PCDATA	$2, $0
PCDATA	$0, $2
CMPQ	"".ep+80(SP), $1
JEQ	286
PCDATA	$0, $0
MOVQ	"".d+296(SP), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
// PT 3
PCDATA	$0, $4
MOVQ	"".dp+136(SP), AX
PCDATA	$0, $0
CMPQ	"".ep+88(SP), AX
JEQ	254
MOVQ	"".QNaN64(SB), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
MOVQ	"".e+304(SP), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
PCDATA	$0, $2
CMPQ	"".ep+80(SP), $1
JNE	381
CMPQ	AX, $1
JMP	244
CMPQ	"".dp+152(SP), $0
JEQ	1243
CMPQ	"".ep+104(SP), $0
JEQ	1211
PCDATA	$2, $1
LEAQ	"".ep+80(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
CALL	"".(*DecParts).removeZeros(SB)
PCDATA	$2, $1
// PT 4
LEAQ	"".dp+128(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
CALL	"".(*DecParts).removeZeros(SB)
PCDATA	$2, $1
LEAQ	"".dp+128(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
PCDATA	$2, $2
LEAQ	"".ep+80(SP), CX
PCDATA	$2, $0
MOVQ	CX, 8(SP)
CALL	"".(*DecParts).separation(SB)
MOVQ	16(SP), AX
TESTQ	AX, AX
JGE	609
PCDATA	$0, $5
MOVUPS	"".dp+128(SP), X0
MOVUPS	X0, ""..autotmp_27+224(SP)
MOVUPS	"".dp+144(SP), X0
MOVUPS	X0, ""..autotmp_27+240(SP)
PCDATA	$0, $6
MOVUPS	"".dp+160(SP), X0
MOVUPS	X0, ""..autotmp_27+256(SP)
PCDATA	$0, $5
MOVUPS	"".ep+80(SP), X0
MOVUPS	X0, "".dp+128(SP)
MOVUPS	"".ep+96(SP), X0
MOVUPS	X0, "".dp+144(SP)
PCDATA	$0, $7
MOVUPS	"".ep+112(SP), X0
MOVUPS	X0, "".dp+160(SP)
PCDATA	$0, $5
MOVUPS	""..autotmp_27+224(SP), X0
MOVUPS	X0, "".ep+80(SP)
MOVUPS	""..autotmp_27+240(SP), X0
MOVUPS	X0, "".ep+96(SP)
PCDATA	$0, $2
MOVUPS	""..autotmp_27+256(SP), X0
MOVUPS	X0, "".ep+112(SP)
NEGQ	AX
CMPQ	AX, $17
JGT	1176
PCDATA	$2, $1
LEAQ	"".dp+128(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
PCDATA	$2, $2
LEAQ	"".ep+80(SP), CX
PCDATA	$2, $0
MOVQ	CX, 8(SP)
CALL	"".(*DecParts).matchScales128(SB)
PCDATA	$2, $1
PCDATA	$0, $4
LEAQ	"".dp+128(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
PCDATA	$2, $1
PCDATA	$0, $0
LEAQ	"".ep+80(SP), AX
PCDATA	$2, $0
MOVQ	AX, 8(SP)
CALL	"".(*DecParts).add128(SB)
PCDATA	$0, $8
MOVUPS	16(SP), X0
MOVUPS	X0, "".ans+176(SP)
MOVUPS	32(SP), X0
MOVUPS	X0, "".ans+192(SP)
MOVUPS	48(SP), X0
MOVUPS	X0, "".ans+208(SP)
PCDATA	$2, $1
LEAQ	"".ans+176(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
CALL	"".(*DecParts).roundToLo(SB)
MOVQ	8(SP), AX
CMPQ	"".ans+192(SP), $-398
JLT	1140
XCHGL	AX, AX
MOVQ	"".ans+200(SP), CX
MOVQ	"".ctx+288(SP), DX
TESTQ	DX, DX
JNE	1076
TESTQ	$12, AX
JEQ	1068
LEAQ	1(CX), AX
MOVQ	AX, "".ans+200(SP)
MOVQ	"".ans+192(SP), CX
CMPQ	CX, $-398
JLT	828
TESTQ	AX, AX
JNE	1023
MOVQ	"".ans+192(SP), AX
CMPQ	AX, $369
JLE	900
PCDATA	$2, $1
MOVQ	"".infinities(SB), AX
PCDATA	$0, $0
MOVQ	"".ans+184(SP), CX
CMPQ	"".infinities+8(SB), CX
JLS	1302
PCDATA	$2, $0
MOVQ	(AX)(CX*8), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
PCDATA	$0, $8
MOVQ	"".ans+200(SP), CX
MOVQ	$9999999999999999, DX
CMPQ	CX, DX
JHI	844
XCHGL	AX, AX
PCDATA	$0, $0
MOVQ	"".ans+184(SP), DX
SHLQ	$63, DX
MOVQ	$9007199254740992, BX
CMPQ	CX, BX
JCC	991
ADDQ	$398, AX
SHLQ	$53, AX
ORQ	DX, AX
ORQ	CX, AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
SHLQ	$11, CX
SHRQ	$11, CX
ADDQ	$398, AX
ORQ	$3072, AX
SHLQ	$51, AX
ORQ	DX, AX
ORQ	CX, AX
JMP	967
PCDATA	$0, $8
MOVQ	CX, (SP)
MOVQ	AX, 8(SP)
CALL	"".renormalize(SB)
MOVQ	16(SP), AX
MOVQ	24(SP), CX
MOVQ	AX, "".ans+192(SP)
MOVQ	CX, "".ans+200(SP)
JMP	828
MOVQ	CX, AX
JMP	794
CMPQ	DX, $1
JNE	1126
CMPQ	AX, $4
JNE	1121
MOVQ	CX, DX
ANDQ	$1, CX
CMPQ	CX, $1
JNE	1110
LEAQ	1(DX), AX
JMP	794
CMPQ	AX, $8
JEQ	1101
MOVQ	DX, CX
JMP	1068
MOVQ	CX, DX
JMP	1110
CMPQ	DX, $2
JNE	1068
MOVQ	CX, AX
JMP	794
PCDATA	$2, $1
LEAQ	"".ans+176(SP), AX
PCDATA	$2, $0
MOVQ	AX, (SP)
MOVQ	$-398, 8(SP)
CALL	"".(*DecParts).rescale(SB)
MOVQ	16(SP), AX
JMP	752
PCDATA	$2, $1
PCDATA	$0, $0
MOVQ	"".dp+168(SP), AX
PCDATA	$2, $0
MOVQ	(AX), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
MOVQ	"".d+296(SP), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
MOVQ	"".e+304(SP), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
MOVQ	(AX), AX
MOVQ	AX, "".~r2+312(SP)
MOVQ	272(SP), BP
ADDQ	$280, SP
RET
CALL	runtime.panicindex(SB)
UNDEF
NOP
PCDATA	$0, $-1
PCDATA	$2, $-1
CALL	runtime.morestack_noctxt(SB)
JMP	0