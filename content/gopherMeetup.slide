Go for Decimals
Tags: decimal, floating point, fixed precision, ieee 754R

Joshua Carpeggiani
Software Engineer, ANZ
joshua.carpeggiani@anz.com

* Gopher
.image gopher.png
: Another Decimal Library
: Open source project started by senior guy at anz without much time
: Enter Josh
: Started with go in December 2018
: First time working on Go and open source
* Usage of decimal libraries
.image img/decimalSurvey.png 600 _
* Correctness

* Floating point numbers
.html html/floatingpointbits.html
.play ../examples/floatExample.go /^func main/,/^}/
- floats aren't sufficient
* History of floats
.image img/File_001.png 500 _

* Scientific notation

.html html/basic.html

* Binary floating point numbers
.html html/basicBinary.html
: This number is equal to 9.3125

* Floating point arithmetic
- “Decoding” isn’t really needed

.html html/floatingPointDecoding.html
- Number of exponent is the same as the number of shifting places

* Floating point arithmetic
- “Decoding” isn’t really needed
.html html/floatingPointDecoding2.html
.play ../examples/bitshifts.go /^func main/,/^}/


* The problem with floating point numbers
Repeated decimal numbers:
.html html/110.html
Repeated binary numbers:
.html html/decFrac.html

* Why?
.html html/Sheet2.html
* Why?
.image img/BinDec.png _ 500
* When does this matter?

- Compounding errors
- Need for exact numbers

.play ../examples/TimeRounding.go /^func main/,/^}/


* Solution - Decimal datatype

.html html/110decimal.html

.code ../examples/decimalExample.go /^func main/,/^}/
Base 10 counting system instead of base 2

* History of floats
.image img/FullTimeline.png 400 _

* Usage of decimal libraries
.image img/decimalSurvey.png 600 _

* Existing Go decimal datatypes
.link https://github.com/ericlagergren/decimal/ github.com/ericlagergren/decimal
.link https://github.com/cockroachdb/apd github.com/cockroachdb/apd
.link https://github.com/shopspring/decimal github.com/shopspring/decimal
shopspring seems to be unsupported; last commit was June 2018

* 'Arbitrary precision' decimals
'Big Decimals'
- Based on big.int
- Allows for arbitrary precision

.code ../examples/bigDecimal.go  /^type Decimal struct/,/^}/

    type Int struct {
        neg bool // sign
        abs nat  // absolute value of the integer
    }

    type nat []Word

    type Word uint


: “Big decimals” and how they work (really just listing these points)
: math/big → slice of bytes and does calculations from there
: Other implementations are based on big ints, which are
: Decimal(type big int) → nat → []word (type uint) (2 pointers)
: This is fundamentally slower, and takes up more space, even for an empty decimal
: Arithmetic needs to access slices, then calculate, then write to slice
- Walking pointers is inherently going to be slower

* Another Decimal library
.link http://www.github.com/anz-bank/decimal

- Project Goal: Implement a 64 & 128 bit decimal floating point library
- Conform as closely to ieee 754-2008 standard as practical

: I came on board in december, and it was my first go project
: The library already had quite a substantial code base

* A decimal type optimized for performance
    type Decimal64 struct {
        bits uint64
    }


- Fast by intention, altough can only represent a max value of 999999999999999*10^384
- Unlike big decimal which can represent arbitrarily large numbers

: What would a go “style” decimal look like?
: Elegant and self contained, only making use of essential math/bits packages
: Simple uint64 type (decimal 128 type coming too)
: This simplifies a lot of arithmetic, makes encoding and decoding simple and fast and is suitable for many use cases

* Bit representation of ieee 754-2008 decimal floating point
.html html/floatingpointbits.html
.html html/decimalpointbits.html
pros:
- small footprint within single uint64
- nice and clean
- no pointers 
cons:
- No arbitrary precision

* Benchmarking
Testing
- IBM test suite online with _81,300_ test cases
.link http://speleotrove.com/decimal/
Note: these benchmarks are testing edgecases

* Benchmarking

- float64
- anz-bank/decimal
- shopspring/decimal
- ericlagergren/decimal
Benchmarks are located at
.link https://github.com/joshcarp/decimal-slides

* Arithmetic benchmarks - Multiply

.image img/Multiply_6.png 500 _


* Why?
- Slower than expected
- Theory: Maybe encoding/decoding has slowed it down
* Encoding/Decoding a decimal floating point number

    type Decimal64 struct {
        bits uint64
    }

    type DecParts struct {
        fl          flavor
        sign        int
        exp         int
        significand uint128T
        dec         *Decimal64
    }
- starting to look a little like Big decimals ...
* Why?
    func (d Decimal64) Add(e Decimal64) Decimal64 {
        dp := d.getParts()
        ep := e.getParts()
        var ans DecParts
        // Arithmetic here ...
        return newFromParts(ans)
    }
- first thing we need to do is encode, last thing we do is decode
* Why?
.html html/decimalpointbits.html

Expands 

.html html/decExpanded.html

* Decimal decoding
.html html/decimalDecoding.html

* Benchmarks v2
- removing the encoding and decoding; only use struct

* Arithmetic benchmarks - Multiply

.image img/Multiply_5.png 500 _


* ericlagergren Big decimal
    type Big struct {
        // Context is used to give info like rounding modes and all
        Context Context

        // unscaled is only used if the decimal is too large to fit in compact.
        unscaled big.Int
        compact  uint64
        exp      int

        // ... more utility fields ...
- combines the speed of fixed precision and the accuracy of arbitrary precision
- doesn't actually pass around any structs
 
  func (c Context) Add(z, x, y *Big) *Big { 


* Decimal comparisons

.html html/comparison.html

* In the future
- Need to optimise more
- More benchmarking + Cross platorm
- A good, well supported decimal would boost adoption in financial sector
- join the fun: github.com/anz-bank/decimal
: We’d love for decimal to be part of the go core, might also boost adoption in the finance sector
: Show an application of anz-bank decimal, and how code would be a lot more elegant with operator overloading and such
*   (overloading)
	b := decimal.MustParseDecimal64("0.3")
	c := decimal.MustParseDecimal64("0.1")
	a := c.Mul(a)

	// or something like
	a := 0.3
	b := 0.1
	c := c * a

* Links
- Graphics adapted fromfrom
.link https://ciechanow.ski/exposing-floating-point/

- Benchmarking
.link https://github.com/joshcarp/decimal-slides
- Github
.link https://github.com/anz-bank/decimal

- Survey from reddit user kardianos
