Go for Decimals
Tags: decimal, floating point, fixed precision, ieee 754R

Joshua Carpeggiani
Software Engineer, ANZ
joshua.carpeggiani@anz.com

* How do represent a non-integer number ... 

* Floating point numbers
.html html/floatingpointbits.html
.play ../examples/floatExample.go /^func main/,/^}/
- floats aren't sufficient

* The problem with floating point numbers
Repeated decimal numbers:
.html html/110.html
Repeated binary numbers:
.html html/decFrac.html

* Why?
.html html/Sheet2.html
* Why?
.image img/BinDec.png _ 500
* When does this matter?

- Compounding errors
- Need for exact numbers

.play ../examples/TimeRounding.go /^func main/,/^}/

* Go types:
- int, uint, float, complex

* Usage of decimal libraries
.image img/decimalSurvey.png 600 _
* Correctness


* Why is this?

* late 1930's
- Z1
- Comes up with idea of +- inf, and NaN (Not a number) for special cases
: This guy names Konrad Zuse came up with a way of storing "floating point numbers"

* Next 30 years
- floating point numbers implemented slightly differently

* Until 1980
- Intel 8087 released
- FPU; "Floating Point Unit"
- Used to speed up calculations via hardware implementations
- C released 8 years before; no floating point numbers

* 5 Years later: 1985
- IEEE 754 standard:
- Standardised floating point implementations across platforms
- (check this): 1982 Ansi C would implement float as a builtin type
- Implemented into almost every programming language and has hardware support on majorty of cpu architectures

* Go types:
- int, uint, float, complex

* What's the fix?
- Decimal arithmetic




* History of floats
.image img/File_001.png 500 _

* Scientific notation

.html html/basic.html

* Binary floating point numbers
.html html/basicBinary.html

* Floating point arithmetic
- “Decoding” isn’t really needed

.html html/floatingPointDecoding.html
- Number of exponent is the same as the number of shifting places

* Floating point arithmetic
- “Decoding” isn’t really needed
.html html/floatingPointDecoding2.html
.play ../examples/bitshifts.go /^func main/,/^}/

* Solution - Decimal datatype

.html html/110decimal.html

.code ../examples/decimalExample.go /^func main/,/^}/
Base 10 counting system instead of base 2

* History of floats
.image img/FullTimeline.png 400 _

* Usage of decimal libraries
.image img/decimalSurvey.png 600 _

* Existing Go decimal datatypes
.link https://github.com/ericlagergren/decimal/ github.com/ericlagergren/decimal
.link https://github.com/cockroachdb/apd github.com/cockroachdb/apd
.link https://github.com/shopspring/decimal github.com/shopspring/decimal
shopspring seems to be unsupported; last commit was June 2018

* 'Arbitrary precision' decimals
'Big Decimals'
- Based on big.int
- Allows for arbitrary precision

.code ../examples/bigDecimal.go  /^type Decimal struct/,/^}/

.code ../examples/bigInt.go /(?s)type Int struct {(.*)/


- Walking pointers is inherently going to be slower

* Another Decimal library
.link http://www.github.com/anz-bank/decimal

- Project Goal: Implement a 64 & 128 bit decimal floating point library
- Conform as closely to ieee 754-2008 standard as practical




* A decimal type optimized for performance
.code ../examples/decimal.go /^type Decimal64 struct/,/^}/
- Fast by intention, altough can only represent a max value of 999999999999999*10^384
- Unlike big decimal which can represent arbitrarily large numbers






* Bit representation of ieee 754-2008 decimal floating point
.html html/floatingpointbits.html
.html html/decimalpointbits.html
pros:
- small footprint within single uint64
- nice and clean
- no pointers 
cons:
- No arbitrary precision

* Benchmarking
Testing
- IBM test suite online with _81,300_ test cases
.link http://speleotrove.com/decimal/
Note: these benchmarks are testing edgecases

* Benchmarking

- float64
- anz-bank/decimal
- shopspring/decimal
- ericlagergren/decimal
Benchmarks are located at
.link https://github.com/joshcarp/decimal-slides

* Arithmetic benchmarks - Multiply

.image img/Multiply_6.png 500 _

* Why?
- Slower than expected
- Theory: Maybe encoding/decoding has slowed it down
* Encoding/Decoding a decimal floating point number
.code ../examples/decParts.go  /START OMIT/,/END OMIT/

- starting to look a little like Big decimals ...
* Why?
.code ../examples/ansFunction.go /START OMIT/,/END OMIT/
- first thing we need to do is encode, last thing we do is decode
* Why?
.html html/decimalpointbits.html

Expands 

.html html/decExpanded.html

* Decimal decoding
.html html/decimalDecoding.html

* Benchmarks v2
- removing the encoding and decoding; only use struct

* Arithmetic benchmarks - Multiply

.image img/Multiply_5.png 500 _

* ericlagergren Big decimal
.code ../examples/ericDecimal.go /START OMIT/,/END OMIT/
- combines the speed of fixed precision and the accuracy of arbitrary precision
- doesn't actually pass around any structs
 
  func (c Context) Add(z, x, y *Big) *Big { 


* Decimal comparisons

.html html/comparison.html

* In the future
- Need to optimise more
- More benchmarking + Cross platorm
- A good, well supported decimal would boost adoption in financial sector
- join the fun: github.com/anz-bank/decimal


*   (overloading)
.code ../examples/overloading.go /START OMIT/,/END OMIT/

* Links
- Graphics adapted fromfrom
.link https://ciechanow.ski/exposing-floating-point/

- Benchmarking
.link https://github.com/joshcarp/decimal-slides
- Github
.link https://github.com/anz-bank/decimal

- Survey from reddit user kardianos
