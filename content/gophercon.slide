Go for Decimals
Tags: decimal, floating point, fixed precision, ieee 754R

Joshua Carpeggiani
Software Engineer, ANZ
joshua.carpeggiani@anz.com

* How do represent a non-integer number ... 

* Floating point numbers
.html html/floatingpointbits.html
.play ../examples/floatExample.go /^func main/,/^}/
- floats aren't sufficient

* The problem with floating point numbers
Repeated decimal numbers:
.html html/110.html
Repeated binary numbers:
.html html/decFrac.html

* Why?
.html html/Sheet2.html
* Why?
.image img/BinDec.png _ 500
* When does this matter?

- Compounding errors
- Need for exact numbers

.play ../examples/TimeRounding.go /^func main/,/^}/

* Scientific notation

.html html/basic.html

* Binary floating point numbers
.html html/basicBinary.html


* Go types:
- int, uint, float, complex

* Usage of decimal libraries
.image img/decimalSurvey.png 600 _

* Requirements of a number library
1. Accuracy x
2. Portability 
3. Speed

* Portability 

* late 1930's
- Z1
- Comes up with idea of +- inf, and NaN (Not a number) for special cases
: This guy names Konrad Zuse came up with a way of storing "floating point numbers"

* Next 30 years
- floating point numbers implemented slightly differently
- Rounding attributes?
- Rounding to infinity?
- 1/0 or 0/0????

* Until 1980
- Intel 8087 released
- FPU; "Floating Point Unit"
- Used to speed up calculations via hardware implementations
- C released 8 years before; no floating point numbers

* 5 Years later: 1985
- IEEE 754 standard:
- Standardised floating point implementations across platforms
- (check this): 1982 Ansi C would implement float as a builtin type
- Implemented into almost every programming language and has hardware support on majorty of cpu architectures

* Hardware support
- Different architectures supporting the same standard to ensure the same results

* Requirements of a number library
1. Accuracy x
2. Portability y
3. Speed y 
(Portability and Speed kinda come together)

* The problem still exists
* Go types:
- int, uint, float, complex

* Solution - Decimal datatype

.html html/110decimal.html

.code ../examples/decimalExample.go /^func main/,/^}/
Base 10 counting system instead of base 2

* Usage of decimal libraries
.image img/decimalSurvey.png 600 _

* IEEE 754-r
- New and revised version released in 2018

* Existing Go decimal datatypes
.link https://github.com/ericlagergren/decimal/ github.com/ericlagergren/decimal
.link https://github.com/cockroachdb/apd github.com/cockroachdb/apd
.link https://github.com/shopspring/decimal github.com/shopspring/decimal
shopspring seems to be unsupported; last commit was June 2018

* Bit representation of IEEE 754-2008 decimal floating point
.html html/floatingpointbits.html
.html html/decimalpointbits.html

pros:
- small footprint within single uint64
- nice and clean
- no pointers 
cons:
- No arbitrary precision

* IEEE 754-r
- New and revised version released in 2018

* A new decimal library in go
- Follows 2008-r standard
- Allows for future hardware support and optimisations

* Benchmarking
Testing
- IBM test suite online with _81,300_ test cases
.link http://speleotrove.com/decimal/
Note: these benchmarks are testing edgecases

* Benchmarking

- float64
- anz-bank/decimal
- shopspring/decimal
- ericlagergren/decimal
Benchmarks are located at
.link https://github.com/joshcarp/decimal-slides

* Arithmetic benchmarks - Multiply

* Requirements of a number library
1. Accuracy y
2. Portability y
3. Speed y 

* Looking forward 
- More optimisation 
- Expand math library
- Implement 128 and 64 bit

* Links
- Graphics adapted fromfrom
.link https://ciechanow.ski/exposing-floating-point/

- Benchmarking
.link https://github.com/joshcarp/decimal-slides
- Github
.link https://github.com/anz-bank/decimal

- Survey from reddit user kardianos
