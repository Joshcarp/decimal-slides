Go for Decimals
Tags: decimal, floating point, fixed precision, IEEE 754R

Joshua Carpeggiani
Software Engineer, ANZ
joshua.carpeggiani@anz.com

* 
.image img/missile.png

* Go for decimals
Joshua Carpeggiani


: Melbourne university
: Go project I started after meeting someone in a greengrocer
: First peer reviewed project
: University is really good at getting you to put a lot of effort into an assignment
: only for you to get some mediocre feedback that you're never going to implement 
: Go has been great to learn and use

* Floating point numbers
.image code/first_example.png 258 _


* Floating point numbers
.image code/first_example.png 258 _

.image code/first_ans1.png _ 300



* Floating point numbers
.image code/second.png 400 _


* Floating point numbers
.image code/second.png 400 _
.image code/second_ans.png _ 500

: 41 seconds going at 5 times the speed of sound is long enough to travel 71 kms 

* Not all numbering systems are created equal

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html
.html html/binary_counting/2.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html
.html html/binary_counting/2.html
.html html/binary_counting/3.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html
.html html/binary_counting/2.html
.html html/binary_counting/3.html
.html html/binary_counting/4.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html
.html html/binary_counting/5.html


* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html
.html html/binary_counting/5.html
.html html/binary_counting/6.html


* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html
.html html/binary_counting/5.html
.html html/binary_counting/6.html
.html html/binary_counting/7.html

* Binary floating point numbers
.html html/1e-2.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/11_1.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/11.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/12.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/14.html


* Why?
.image img/BinDec.png _ 500
: Lets take factors of 10; 5 and 2.
: Because they have symbols, their inverses also have exact representations too 

: This means that all binary numbers can be represented in a decimal system, not vice versa


* Another Decimal library
.link http://www.github.com/anz-bank/decimal

- Project Goal: Implement a 64 & 128 bit decimal floating point library
- Conform as closely to IEEE 754-2008 standard as practical

: Other projects exist; although they use different encodings
: This one was chosen for a couple of reasons
: 1. Speed; Fitting in everything in a 64 and 128 bit uint means that no dealing with slices like other types
: 2. Portability: Using a standard encoding allows for portability across programs; if you need to store a piece of data, but don't want to store it as an intermediate string there's no need to. 
: once all 
: 2. Extendibility; Using a fixed precision allows for 


* Scientific notation

.html html/basic.html

* Scientific notation

.html html/basic2.html


* Scientific notation

.html html/basicAddition.html



* Another Decimal library
.image code/decimal_example.png 345 _


* Another Decimal library
.image code/decimal_example.png 345 _

.image code/decimal_ans.png 175 _

* Another Decimal library
.image code/decimalTime.png 345 _

* Another Decimal library
.image code/decimalTime.png 345 _

.image code/decimal_time_ans.png 175 _

* The End

* Decimal decoding 
.html html/decimal_decoding/dec1.html

* Decimal decoding 
.html html/decimal_decoding/dec2.html

* Decimal decoding 
.html html/decimal_decoding/dec3.html

* Decimal decoding 
.html html/decimal_decoding/dec4.html

* Decimal decoding 
.html html/decimal_decoding/dec5.html

* Decimal decoding 
.html html/decimal_decoding/dec51.html

* Decimal decoding 
.html html/decimal_decoding/dec52.html

* Decimal decoding 
.html html/decimal_decoding/dec6.html

* Binary decoding 
.html html/decimal_decoding/bin1.html

* Binary  decoding 
.html html/decimal_decoding/bin2.html

* Binary decoding 
.html html/decimal_decoding/bin3.html


* Decimal vs Floating point
.image img/Add_new2.png 500 _

* Software vs Hardware
.image img/Add_new.png 500 _


* 
.image img/not_all_implementations.jpg 600 _

* Binary floating point Add
.image code/Add.png 125 _

* Binary floating point Assembler
.image code/Add.png 125 _
.image code/Add.asm.png 375 _

* Binary floating point Assembler
.image code/Add.png 125 _
.image code/Add2.asm.png 375 _

* Decimal Arithmetic in Go
.image code/DecAdd.png _ 923

* Decimal Arithmetic in Go
.image code/Dec1.asm.png _ 923

* Decimal Arithmetic in Go
.image code/Dec2.asm.png _ 923

* Decimal Arithmetic in Go
.image code/Dec3.asm.png _ 923

* Decimal Arithmetic in Go
.image code/Dec4.asm.png _ 923

* A better solution
.image code/intTime.go.png 345 _

* A better solution
.image code/intTime.go.png 345 _
.image code/intTime_ans.png 175 _

* Conclusion
- Use floats if you really need performance
- Use ints as your smallest unit if you need precision and performance
- Use decimals for everything else
- Come contribute
github.com/anz-bank/decimal

* Looking forward
- More optimisation
- Implement 128 bit
- Assembler optimisations

* Another Decimal library
.link http://www.github.com/anz-bank/decimal


