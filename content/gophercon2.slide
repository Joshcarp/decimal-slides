Go for Decimals
Tags: decimal, floating point, fixed precision, IEEE 754R

Joshua Carpeggiani
Software Engineer, ANZ
joshua.carpeggiani@anz.com

* 
.image img/missile.png
: Let me set the scene, it is February 1991, a missile has been launched with a military base in its sights. An anti air defence system kicks into gear ready to blow the enemy ballistic out of the sky, saving those living in the base.
: The system turns on scans the sky for an incoming missile, looking at the part of the sky that sent it the trigger to activate.
: It looks and looks, and looks, and looks. 
: A problem occurs; a floating point rounding error caused the internal clock to be off by a third of a second. 
: Under some circumstances, such inaccuracy might be unnoticeable but when attempting to scan the sky for an object moving five times the speed of sound the result was less than desirable.

: The system can’t find anything. It turns off. 
: The missile hits the base moments later. 

: Less than 24 hours later a software update was deployed to fix the bug that caused the issue. 

* Go for decimals
Joshua Carpeggiani

* Go for decimals
Joshua Carpeggiani
.image img/tour.png 500 _


: Melbourne university
: Part time Software engineer
: Summer internship
: Weird story to how I got going
: i met my now colleague in a fuit and veg shop and we started talking about software engineering
: She mentioned that some jolly old fellow named marcelo was trying to get an summer internship program going on decimals and go
: A project he started on . 
: A couple of weeks go by, some emails have been exchanged and the project finally gets the go-ahead.
: I remember I was on the side of the road trying to hitchhike from melbourne to the gold coast 
: and I’d been stuck for a couple of hours at this point and was checking my emails to keep my sanity. 
: After this I frantically started going through "A tour of go" whilst on my journey

: Got to the gold coast in the end, working on my "proper" software engineering project
: Quite different to university; obviously
: University is really good at getting you to put a lot of effort into an assignment
: only for you to get some mediocre feedback that you're never going to implement 
: anyway 

: Today I want to talk about floating point numbers; their pitfalls and strengths
: Decimals; Possibly a better alternative; the implications of using decimals and a bit about the project I've been part of

* Floating point numbers
.image code/first_example.png 258 _


* Floating point numbers
.image code/first_example.png 258 _

.image code/first_ans1.png _ 300



* Floating point numbers
.image code/second.png 400 _


* Floating point numbers
.image code/second.png 400 _
.image code/second_ans.png _ 500

: 41 seconds going at 5 times the speed of sound is long enough to travel 71 kms

* Not all numbering systems are created equal

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html
.html html/binary_counting/2.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html
.html html/binary_counting/2.html
.html html/binary_counting/3.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/0.html
.html html/binary_counting/2.html
.html html/binary_counting/3.html
.html html/binary_counting/4.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html
.html html/binary_counting/5.html


* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html
.html html/binary_counting/5.html
.html html/binary_counting/6.html


* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/2.html
.html html/binary_counting/5.html
.html html/binary_counting/6.html
.html html/binary_counting/7.html

* Binary floating point numbers
.html html/1e-2.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/11_1.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/11.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/12.html

* Binary 
.html html/binary_counting/1.html
.html html/binary_counting/14.html


* Why?
.image img/BinDec.png _ 500
: Lets take factors of 10; 5 and 2.
: Because they have symbols, their inverses also have exact representations too 

: This means that all binary numbers can be represented in a decimal system, not vice versa


* Another Decimal library
.link http://www.github.com/anz-bank/decimal

- Project Goal: Implement a 64 & 128 bit decimal floating point library
- Conform as closely to IEEE 754-2008 standard as practical

: Other projects exist; although they use different encodings
: This one was chosen for a couple of reasons
: 1. Speed; Fitting in everything in a 64 and 128 bit uint means that no dealing with slices like other types
: 2. Portability: Using a standard encoding allows for portability across programs; if you need to store a piece of data, but don't want to store it as an intermediate string there's no need to. 
: once all; language agnostic
: 2. Extendibility; Using a fixed precision allows for 


* Scientific notation

.html html/basic.html

* Scientific notation

.html html/basic2.html


* Scientific notation

.html html/basic3.html


* Scientific notation

.html html/basicAddition.html

* Scientific notation

.html html/basicAddition1.html

* Scientific notation

.html html/basicAddition2.html



* Another Decimal library
.image code/decimal_example.png 345 _


* Another Decimal library
.image code/decimal_example.png 345 _

.image code/decimal_ans.png 175 _

* Another Decimal library
.image code/decimalTime.png 345 _

* Another Decimal library
.image code/decimalTime.png 345 _

.image code/decimal_time_ans.png 175 _

* Applause

* The End?


* The End?
- Use decimals for everything?

* The End?
- Use decimals for everything?
- Why doesn't everything use this?

* The End?
- Use decimals for everything?
- Why doesn't everything use this?
- Are decimals even that efficient?

: IBM research; out of a survey in 2007 of enterprise databases;
: 55% of numeric data was decimal



* Decimal decoding 
.html html/decimal_decoding/dec1.html

* Decimal decoding 
.html html/decimal_decoding/dec2.html

* Decimal decoding 
.html html/decimal_decoding/dec3.html

* Decimal decoding 
.html html/decimal_decoding/dec4.html

* Decimal decoding 
.html html/decimal_decoding/dec5.html

* Decimal decoding 
.html html/decimal_decoding/dec51.html

* Decimal decoding 
.html html/decimal_decoding/dec52.html

* Decimal decoding 
.html html/decimal_decoding/dec6.html

* Binary decoding 
.html html/decimal_decoding/bin1.html

* Binary  decoding 
.html html/decimal_decoding/bin2.html

* Binary decoding 
.html html/decimal_decoding/bin3.html


* Decimal vs Floating point
.image img/Add_new2.png 500 _

* Software vs Hardware
.image img/Add_new.png 500 _

* 
.image img/not_all_implementations.jpg 600 _
: TAKE A BREAK

* Binary floating point Add
.image code/Add.png 125 _

: 250 times slower than floating point addition

* Binary floating point Assembler
.image code/Add.png 125 _
.image code/Add.asm.png 375 _

: 7 times slower than software floating point addition

* Binary floating point Assembler
.image code/Add.png 125 _
.image code/Add2.asm.png 375 _

* Decimal Arithmetic in Go
.image code/DecAdd.png _ 923

* Decimal Arithmetic in Go
.image code/Dec1.asm.png _ 923

* Decimal Arithmetic in Go
.image code/Dec2.asm.png _ 923

* Decimal Arithmetic in Go
.image code/Dec3.asm.png _ 923

* Decimal Arithmetic in Go
.image code/Dec4.asm.png _ 923

: It's CRAZY to think that 55% of databases use this type; consider the inefficency.
: IBM research Using this method takes 50-90% more processing resources instead of using a builtin type

* Is there a better way?
: Relate back to the missile defence system
: Maybe if we rething the question a little bit:
: Going back to our clock example, lets try to use ints

* A better solution
.image code/intTime.go.png 345 _

* A better solution
.image code/intTime.go.png 345 _
.image code/intTime_ans.png 175 _

* Conclusion
- Use floats if you really need performance and not precision
- Use ints as your smallest unit if you need precision and performance
- Use decimals for everything else
- Come contribute
github.com/anz-bank/decimal

* Looking forward
- More optimisation
- Implement 128 bit
- Assembler optimisations

: I know every man and his dog might want to put something in the go core, 
: and even though I personally feel like the language that we use should be easy and intuative
: And apparently it's not such a crazy idea that there has actually been a proposal that hasen't been closed yet

* Go core?
.image img/proposal.png 500 _
: This would give go a more intuative numbering system in go, despite its downfalls
: Or even being able to overload the operators in go could even be good enough




